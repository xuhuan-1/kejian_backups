轮询：polling
    定时器，隔一段时间启动服务，发送消息，没有新消息，则会挂起【断开】，
    有新消息，可以在下个轮询内获取到新数据，数据有延迟【一般是服务端实现】

    原理：定时器配合ajax实现轮询，隔一段时间发送请求，获取最新数据

    缺点：一直发送请求，浪费宽带

长连接：comet
    长连接是对轮询的改进，发送请求，建立连接之后一直不断开，服务端有新消息了，
    返回给客户端，没有消息，不做声，一直连接着服务，会造成性能消耗，连接的服务了
    会造成卡顿，当然，数据传输很及时，没有延迟

    原理：发送ajax请求，服务端会拦截当前请求，有新数据了，就放开当前请求，返回数据
         给客户端，没有数据，则服务端一直拦截，不会断开
    
    高并发问题：加服务器  === 烧钱

    Angular：MVC设计模式框架   C：controller控制器

web socket:
    唯一的双向通信协议
    建立在TCP传输协议之上的新的协议，ws协议
    持久连接，有状态的，一旦连接成功，则不会主动的断开
    连接，除非手动断开连接

    协议：ws 
    安全协议：wss

    主要用于实时聊天、客服等场景

    生命周期：
        优点：
            1、可控制，易于维护
            2、从0-1，1-0完成的周期
            3、模块化【分阶段】
            4、不能颠倒顺序

    生命周期函数：
        connectting:开始连接
        connected：连接成功
        onlive: 保持连接 onlive：是在connect之后和disconnectting之前 才能接受和发送数据
        disconnectting: 开始断开连接
        disconnected：已经断开连接了
        ondeath: 真正的断开完成了

    事件：
        connect：连接事件
        disconnect:断开连接

    onopen : 连接成功的回调函数
    onclose: 连接关闭的回调函数
    onerror: 连接失败的回调函数
    onmessage:客户端接收到服务端数据的回调
    readyState：连接状态码 ，有4个值  0 1 2 3 
                CONNECTING：0  开始建立连接
                OPEN:  1 连接成功，此阶段可以传输数据
                COLOSEING：2 开始断开连接
                CLOSED： 3 断开连接成功

    close:关闭连接的函数
    send:发送数据的函数

    因为websocket是双向通信，所以onmessage是前后端响应数据成功的函数

    npm init :初始化package.json ，项目的配置文件，json格式的
            不允许有汉字、单引号、备注

    服务器启动命令：npm run start

    


