创建环境【三步】 --》 预编译 --》 执行【分同步异步代码】 --》 同步代码栈的主线程执行
--》 异步代码到任务队列排队 --》 同步代码执行完成时，主线程空闲  --》检查任务队列，执行异步任务
--》 各个线程开始执行各自的任务  --》 调用浏览器的paint() 画图  --》 呈现UI
GUI线程： 渲染UI
事件循环：
    1、所有的JS都在栈的主线程执行
    2、主线程优先执行同步任务
    3、同步任务执行完毕了，主线程空闲了，再去检查任务队列中是否有异步任务存在
    4、有异步任务，先检查上一个宏任务中是否有遗留微任务，有则，先执行，没有执行当前宏任务
    5、循环3、4步骤，直到任务队列中没有任务，主线程就停止了
    6、当遇到async中的await时，await之前的代码同步执行【立即执行】，await立即返回执行结果
       之后的同步代码被扔到微任务队列中了，异步代码被扔到下一个宏任务中去
    7、Promise异步对象，同步执行，【立即执行】

宏任务：
    定时器、setImmediate、I/O操作、UI渲染、requestAnimationFrame【宏任务】
微任务：
    MutationObserver、Object.observe()、Promise.then()、Promise.catch()、、Promise.finally()、
    process.nextTick()



